import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: "com.adarshr.test-logger"

description = 'Play audio to discord voice channels'
mainClassName = "lavalink.server.Launcher"
ext {
    moduleName = 'Lavalink-Server'
}

bootJar {
    archiveName = "Lavalink.jar"
    doLast {
        copy {
            from 'build/libs/Lavalink.jar'
            into '.'
        }
    }
}

sourceCompatibility = targetCompatibility = 11

bootRun {
    //compiling tests during bootRun increases the likelihood of catching broken tests locally instead of on the CI
    dependsOn compileTestJava

    //pass in custom jvm args
    // source: https://stackoverflow.com/a/25079415
    // example: ./gradlew bootRun -PjvmArgs="--illegal-access=debug -Dwhatever=value"
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

dependencies {
    compile (group: 'moe.kyokobot.koe', name: 'core', version: koeVersion) {
        // This version of SLF4J does not recognise Logback 1.2.3
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    compile group: 'moe.kyokobot.koe', name: 'ext-udpqueue', version: koeVersion
    compile group: 'com.github.Walkyst', name: 'lavaplayer-fork', version: lavaplayerVersion
    compile (group: 'com.github.Walkyst', name: 'lavaplayer-fork-youtube-rotator', version: lavaplayerIpRotatorVersion) {
        exclude group: 'com.github.Walkyst', module: 'lavaplayer-fork'
    }
    compile group: 'com.github.natanbc', name: 'lavadsp', version: lavaDspVersion
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion

    compile group: 'org.springframework', name: 'spring-websocket', version: springWebSocketVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    compile group: 'io.sentry', name: 'sentry-logback', version: sentryLogbackVersion
    compile group: 'com.github.oshi', name: 'oshi-core', version: oshiVersion
    compile group: 'org.json', name: 'json', version: jsonOrgVersion
    compile group: 'com.google.code.gson', name: 'gson', version: gsonVersion
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion) {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-undertow', version: springBootVersion
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion

    compile group: 'io.prometheus', name: 'simpleclient', version: prometheusVersion
    compile group: 'io.prometheus', name: 'simpleclient_hotspot', version: prometheusVersion
    compile group: 'io.prometheus', name: 'simpleclient_logback', version: prometheusVersion
    compile group: 'io.prometheus', name: 'simpleclient_servlet', version: prometheusVersion

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
}

build {
    doLast {
        println 'Version: ' + version
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

//create a simple version file that we will be reading to create appropriate docker tags
void versionTxt() {
    new File("$projectDir/VERSION.txt").text = "$project.version\n"
}

versionTxt()
